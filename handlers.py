from telegram import Update
from telegram.ext import ContextTypes
import json
import os

DATA_FILE = "budget_data.json"

def load_data():
    if not os.path.exists(DATA_FILE):
        return {}
    with open(DATA_FILE, "r") as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫!")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/config <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> <–±—é–¥–∂–µ—Ç>\n/log <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> <+/-—Å—É–º–º–∞>\n/summary\n/notifyon\n/notifyoff"
    )

async def config(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        category = context.args[0]
        amount = float(context.args[1])
        user_id = str(update.message.from_user.id)
        data = load_data()
        data.setdefault(user_id, {"budget": {}, "log": []})
        data[user_id]["budget"][category] = amount
        save_data(data)
        await update.message.reply_text(f"‚úÖ –ë—é–¥–∂–µ—Ç –¥–ª—è '{category}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {amount}")
    except:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: /config <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> <—Å—É–º–º–∞>")

async def log(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        category = context.args[0]
        amount = float(context.args[1])
        user_id = str(update.message.from_user.id)
        data = load_data()
        data.setdefault(user_id, {"budget": {}, "log": []})
        data[user_id]["log"].append({"category": category, "amount": amount})
        save_data(data)
        await update.message.reply_text(f"üìå –ó–∞–ø–∏—Å–∞–Ω–æ: {amount} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category}'")
    except:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: /log <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> <+/-—Å—É–º–º–∞>")

async def summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    data = load_data()
    user_data = data.get(user_id, {"budget": {}, "log": []})
    summary_text = "üìä –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–≤–æ–¥–∫–∞:\n"
    total = 0
    for entry in user_data["log"]:
        total += entry["amount"]
    summary_text += f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {total}\n\n"
    summary_text += "üéØ –ë—é–¥–∂–µ—Ç—ã:\n"
    for cat, val in user_data["budget"].items():
        summary_text += f"- {cat}: {val}\n"
    await update.message.reply_text(summary_text)

async def notify_on(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã (–≤ –¥–µ–º–æ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ).")

async def notify_off(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.")
